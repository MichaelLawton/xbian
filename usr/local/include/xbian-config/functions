#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#Resize SD function is based on the corresponding function in raspi-config
#The overclocking function is copied from raspi-config
#raspi-config is created by Alex Bradbury <asb@asbradbury.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

# Select a file or directory
#  $1 Return value
#  $2 Previous menu
#  $3 Title
#  $4 Path
#  $5 Only files?
#  $6 Specific files?
#  $7 Specific file extension
filedirselect() {
	DELIMITER="%";
	IFS=$'\n'
	ITEMS=($(ls -AlQ $4 | grep ^d | grep -o "\(\".*\"\)"));
	if [ $5 -eq 1 ]; then
		if [ $6 -eq 1 ]; then
			MESSAGE="\nPlease select a *$7 file";
			ITEMS+=($(ls -AlQ $4 | grep -v ^d | awk '{print $9}' | grep -o "\(\".*\"\)" | grep $7));
		else
			MESSAGE="\nPlease select a file";
			ITEMS+=($(ls -AlQ $4 | grep -v ^d | awk '{print $9}' | grep -o "\(\".*\"\)"));
		fi
	else
		MESSAGE="\nPlease select a directory";
	fi
	if [ $(echo ${ITEMS[@]} | grep "$DELIMITER" | wc -l) -gt 0 ]; then
		DELIMITER='@';
	fi
	if [ $(echo ${ITEMS[@]} | grep "$DELIMITER" | wc -l) -gt 0 ]; then
		DELIMITER='^';
	fi

	if [ $4 != "/" ]; then
		LIST="0$DELIMITER[..]$DELIMITER";
		N=1;
	else
		LIST="";
		N=0;
	fi

	for ITEM in ${ITEMS[@]}
	do
		ITEM=$(echo $ITEM | sed -e 's/\ /\_/g' | sed -e 's/\"//g');
		if [ -d $4$ITEM ]; then
			LIST="$LIST$N$DELIMITER[$ITEM]$DELIMITER";
		else
			LIST="$LIST$N$DELIMITER$ITEM$DELIMITER";
		fi

		N=$(($N+1));
	done
	NRITEMS=${#ITEMS[@]};
	if [ $NRITEMS -lt 8 ]; then
		NRITEMS=8;
	fi
	LIST=$(echo \"$LIST\" | awk '{print substr($0,2,length-3)'} | sed -e 's/\_/\ /g');
	IFS="$DELIMITER";
	RETURN=$(dialog --no-kill --backtitle "$BACKTITLE" --title "Config > $3" --extra-button --extra-label Select --ok-label Open --cancel-label Return  --menu $MESSAGE 14 60 $NRITEMS $LIST  3>&1 1>&2 2>&3);
	BUTTON=$?;
	IFS=" ";
	case $BUTTON in
		1)
			return 0;
		;;
		3)
			if [ $4 == "/" ]; then
				SELECTED=$(echo $4${ITEMS[$((RETURN))]} | sed 's/"//g');
			else
				SELECTED=$(echo $4${ITEMS[$((RETURN-1))]} | sed 's/"//g');
			fi
			if [[ $RETURN -gt 0 || $4 == "/" ]]; then
				if [[ $5 -eq 1 && -f $SELECTED ]] || [[ $5 -eq 0 && -d $SELECTED ]]; then
					eval "$1=\"$SELECTED\"";
				else
					if [ $4 == "/" ]; then
						SELECTED=$(echo $4${ITEMS[$((RETURN))]} | sed 's/"//g');
					else
						SELECTED=$(echo $4${ITEMS[$((RETURN-1))]} | sed 's/"//g');
					fi
					if [ -f "$SELECTED" ]; then
						eval "$1=\"$SELECTED\"";
					else
						filedirselect $1 $2 "$3" "$SELECTED/" $5 $6 $7;
					fi
				fi
			else
				LASTDIR=$(echo $4 | sed -e 's/\ /\_/g' | rev | cut -f2 -d "/" | rev);
				if [ -z $LASTDIR ]; then
					SELECTED="/";
				else
					SELECTED=$(eval "echo \"$4\" | sed -e 's/\ /\_/g' | sed -e 's/$LASTDIR\///g' | sed -e 's/\_/\ /g'");
				fi
				filedirselect $1 $2 "$3" "$SELECTED" $5 $6 $7;
			fi
		;;
		0)
		if [[ $RETURN -eq 0 && $4 != "/" ]]; then
			LASTDIR=$(echo $4 | sed -e 's/\ /\_/g' | rev | cut -f2 -d "/" | rev);
			if [ -z $LASTDIR ]; then
				SELECTED="/";
			else
				SELECTED=$(eval "echo \"$4\" | sed -e 's/\ /\_/g' | sed -e 's/$LASTDIR\///g' | sed -e 's/\_/\ /g'");
			fi
			filedirselect $1 $2 "$3" "$SELECTED" $5 $6 $7;
		else
			if [ $4 == "/" ]; then
				SELECTED=$(echo $4${ITEMS[$((RETURN))]} | sed 's/"//g');
			else
				SELECTED=$(echo $4${ITEMS[$((RETURN-1))]} | sed 's/"//g');
			fi
			if [ -f "$SELECTED" ]; then
				eval "$1=\"$SELECTED\"";
			else
				filedirselect $1 $2 "$3" "$SELECTED/" $5 $6 $7;
			fi
		fi
		;;
	esac;
}

# Set Raspberry PI config variable
# ToDo: Save backup of $3 with history
#  $1 key
#  $2 value
#  $3 file
set_config_var() {
	sed -i "/$1/d" $3
	echo "$1=$2" >> $3
	sed -i '/^$/d' $3
}

# Remove Raspberry PI config variable
# $1 key
# $2 file
remove_config_var() {
	sed -i "/$1/d" /boot/config.txt
}

# Check if root is valid for SSH-login
# return boolean
check_rootssh_status() {
	if [ -f "/etc/ssh/sshd_config" ]; then
		STATUS=$(cat /etc/ssh/sshd_config | grep PermitRootLogin | grep "yes" | wc -l)
		if [ $STATUS -eq 1 ]; then
			DISABLE_ROOTSSH=1;
		else
			DISABLE_ROOTSSH=0;
		fi
	fi
} 


# Sets the RPi overclock
#  $1 Preset name
#  $2 arm_freq
#  $3 core_freq
#  $4 sdram_freq
#  $5 over_voltage
set_overclock() {
	if [ $DEBUG -eq 0 ]; then
		ASKFORREBOOT=1
		set_config_var arm_freq $2 /boot/config.txt >/dev/null
		set_config_var core_freq $3 /boot/config.txt >/dev/null
		set_config_var sdram_freq $4 /boot/config.txt >/dev/null 
		set_config_var over_voltage $5 /boot/config.txt >/dev/null
	fi
	showdialog 	"Config > Settings > Overclocking" \
			"Ok" \
			"\n         Overlock set to preset '$1'"
}

# Check if a package is installed on the system
#  $1 package name
function pkg_installed() {
	RES=$(dpkg-query -W -f='${Status}\n' "$1" 2>/dev/null)
	DEINST=$(echo $RES | grep 'deinstall ok' | wc -l)
	if [ -z "$RES" ]; then
		return 0;
	fi
	if [ $DEINST -eq 1 ]; then
		return 0;
	fi
	return 1;
}

# Check which version of a package that is installed
#  $1 package name
function pkg_version() {
	pkg_installed $1
	if [ $? -eq 1 ]; then
		dpkg-query -W -f='${Version}\n' "$1" 2>/dev/null
	fi
}

# Get individual file sizes
#  $1 Urls to check
#  $2 Totalsize return value
#  $3 Array with individual package sizes
function getremotefilesizes() {

	PKGSIZES=()
	PKGSIZES=($(wget --spider $1 2>&1 | \
	while read X; do \
	SIZE=$(grep -i 'length' <<< "$X" | awk '{print $2}' | sed 's:^.*[^0-9]\([0-9]*\)$:\1:');\
	BROKEN=$(grep -i 'broken link' <<< "$X" | wc -l);
	if [ $BROKEN -eq 1 ]; then echo "Error"; fi;\
	if [ ! -z $SIZE ]; then echo $SIZE; fi;\
	done));

	BROKEN=$(echo ${PKGSIZES[@]} | grep -i "Error" | wc -l);

	if [ $BROKEN -gt 0 ]; then
		return 0;
	fi;

	#Calculate total download size
	TOTALSIZE=0;
	for SIZE in ${PKGSIZES[@]}; do
		TOTALSIZE=$(($(($TOTALSIZE))+$(($SIZE))));
	done
	eval "$2=$TOTALSIZE";
	eval "$3=\"${PKGSIZES[@]}\"";
	return 1;
}

function updateapt() {
	if [ $PACKAGEDBUPDATED -eq 0 ]; then
		showinfo " $1 > $(basename $2) " "\n\n         Updating package database..."
		apt-get update > /dev/null 2>&1
		PACKAGEDBUPDATED=1
	fi
}

# Download updated package-lists if needed
#   $1 Window title for status screen
function download_pkg_list() {
        if [ ! -f /tmp/xbiancache/Packages ]; then
                if [ ! -d /tmp/xbiancache ]; then
                        mkdir /tmp/xbiancache;
                fi
		showinfo "$1" "\n\n            Updating package list..."
                wget -P /tmp/xbiancache ${APTBASE}Packages.gz 2>/dev/null >/dev/null;
                gunzip -c /tmp/xbiancache/Packages.gz > /tmp/xbiancache/Packages;
        fi
}

