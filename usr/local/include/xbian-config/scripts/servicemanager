#!/bin/bash
#
#Copyright 2012 Hexagon <development@xbian.org>
#
#Resize SD function is based on the corresponding function in raspi-config
#The overclocking function is copied from raspi-config
#raspi-config is created by Alex Bradbury <asb@asbradbury.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

function getservices() {

	# Get which services to manage by listing all files in /usr/local/include/xbian-config/services/
	# And placing the results in an array
	SERVICES=($(cat $BASEPATH/services))

	# Fetch which is services are autostarted from /etc/rc5.d/
	# Services only in other runlevels won't show as autostart for now
	STARTUP=($(ls --format=single-column /etc/rc5.d/ | awk '{print substr($1,4) , " SOK" ; }'))

	# Get a list of actually running pids, and concatenate them to a single
	# whitespace separated list
	RUNNING_PIDS=$(ps -eo pid | sed 's/\n/ /g' )

	# Find pidfiles recursively from /var/run, and save the results in a variable
	PIDS=($(find /var/run/ -type f 2>/dev/null | grep 'pid' ))
	RUNNING=( )
	for PIDFILE in ${PIDS[@]}
	do
		# Try to figure out which service the current file belong to
		PID=$(cat $PIDFILE)
		SERVICE=$(echo $PIDFILE | sed 's/dbus\/pid/dbus.pid/g' | rev | cut -d'/' -f1 | rev | cut -d'.' -f1)

		# Check if the pid contained in this pidfile is actually running
        	IS_RUNNING=$(echo $RUNNING_PIDS | grep $PID)
		if [ ! -z $IS_RUNNING ]; then
			# It's running!
			RUNNING+=($(echo -e "$SERVICE ROK\n${SERVICE%?} ROK"))
		else
			RUNNING+=($(echo -e "$SERVICE RNOK\n${SERVICE%?} RNOK"))
		fi
	done

	# Join everything to a single "table"
	join -a 1 -o "0,2.2" <( printf "%s\n" "${SERVICES[@]}" | sort) <(printf "%s\n" "${RUNNING[@]}" | sort) | \
		join -a 1 -o "0,1.2,2.2" - <(printf "%s\n" "${STARTUP[@]})" | sort) | sort | uniq

}

function servicemenu() {

	# Prepare service menu
	SERVICE_DATA=$3
	MENU=()
	if [[ $SERVICE_DATA =~ "SOK" ]]; then
		MENU+="1#Disable autostart#"
	else
		MENU+="1#Enable autostart#"
	fi
	if [[ $SERVICE_DATA =~ "ROK" ]]; then
		MENU+="2#Stop service#"
		MENU+="3#Restart service#"
	else
		MENU+="2#Start service#"
	fi

	# Show service menu
	showmenudesc "$1> $2 " "\n  Available actions for $2\n " $MENU
	if [ $? -eq 0 ]; then
		if [ $RETURN -eq 1 ]; then
			if [[ $SERVICE_DATA =~ "SOK" ]]; then
				showinfo "$1" "\n\n             Disabling autostart of $2"
				update-rc.d -f $2 remove > /dev/null
				SERVICE_DATA=$( echo "$SERVICE_DATA" | sed 's/SOK//g' )
			else
				showinfo "$1" "\n\n              Enabling autostart of $2"
				update-rc.d $2 defaults > /dev/null
				SERVICE_DATA+=" SOK"
			fi
		elif [ $RETURN -eq 2 ]; then
			if [[ $SERVICE_DATA =~ "ROK" ]]; then
				showinfo "$1" "\n\n               Stopping $2"
				service $2 stop > /dev/null
				SERVICE_DATA=$( echo "$SERVICE_DATA" | sed 's/ROK//g' )
			else
				showinfo "$1" "\n\n                Starting $2"
				service $2 start > /dev/null
				SERVICE_DATA+="ROK"
			fi
		elif [ $RETURN -eq 3 ]; then
			showinfo "$1" "\n\n               Restarting $2"
			service $2 stop && sleep 1 && service $2 start
		fi
		servicemenu "$1" "$2" "$SERVICE_DATA";
	else
		servicemanager $1;
	fi
}

function servicemanager() {

	# Select which services to monitor
	IFS=$'\n';

	# Show "Loading" screen
	showinfo "$1" "\n\n          Reading service statuses...\n "

	# List all available services
	SERVICES_DATA=$(getservices)
	SERVICES_ARR=($SERVICES_DATA)
	SERVICES=$( echo "${SERVICES_DATA[@]}" | sed 's/RNOK/Stopped/g' | sed 's/ROK/Running/g' | sed 's/SOK/Yes/g' \
		    | awk '{ if ($2=="") \
					printf "%s#%-14s!%-17s#" , NR , $1, "Stopped";  \
				else if ($3=="") \
					printf "%s#%-14s!%-17s#" , NR , $1, $2;  \
				else \
					printf "%s#%-14s!%-17s!%-32s#", NR , $1, $2, $3; }' )
	# Display menu
	IFS="#";
	showmenudesc 	"$1" \
			"\n Select a service to manage\n \n\Zb    #  Service        Status         Autostart\Zn" \
			$SERVICES

	# Edit service prefs
	if [ $? -eq 0 ]; then
		SERVICE=$( echo ${SERVICES_ARR[$(($RETURN-1))]} | cut -f 1 -d" " )
		if [ ! -z $SERVICE ]; then
			servicemenu "$1" $SERVICE "${SERVICES_ARR[$(($RETURN-1))]}"
		fi
	fi

}
